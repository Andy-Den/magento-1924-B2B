<?php
/**
 * FVets_Payment extension
 * 
 * @excluded       FVets
 * @package        FVets_Payment
 * @copyright      Copyright (c) 2015
 */
?>
<div class="entry-edit">
    <div class="entry-edit-head">
        <h4 class="icon-head head-edit-form fieldset-legend">
            <?php echo Mage::helper('fvets_payment')->__('Excluded') ?>
        </h4>
    </div>
    <fieldset id="grop_fields">
        <input type="hidden" name="excluded_ids" id="condition_excluded" value="<?php echo $this->getIdsString() ?>">
        <div id="condition-excluded" class="tree"></div>
    </fieldset>
</div>
<?php if ($this->getRootNode() && $this->getRootNode()->hasChildren()): ?>
<script type="text/javascript">
    Ext.EventManager.onDocumentReady(function() {
        var excludedLoader = new Ext.tree.TreeLoader({
           dataUrl: '<?php echo $this->getLoadTreeUrl()?>'
        });
        excludedLoader.createNode = function(config) {
            config.uiProvider = Ext.tree.CheckboxNodeUI;
            var node;
            if (config.children && !config.children.length) {
                delete(config.children);
                node = new Ext.tree.AsyncTreeNode(config);
            } else {
                node = new Ext.tree.TreeNode(config);
            }
            return node;
        };
        excludedLoader.on("beforeload", function(treeLoader, node) {
            treeLoader.baseParams.excluded = node.attributes.id;
        });

        excludedLoader.on("load", function(treeLoader, node, config) {
            varienWindowOnload();
        });
        var tree = new Ext.tree.TreePanel('condition-excluded', {
            animate:true,
            loader: excludedLoader,
            enableDD:false,
            containerScroll: true,
            rootUIProvider: Ext.tree.CheckboxNodeUI,
            selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
            rootVisible: '<?php echo $this->getRootNode()->getIsVisible() ?>'
        });
        tree.on('check', function(node) {
            if (node.attributes.checked) {
                excludedAdd(node.id);
            } else {
                excludedRemove(node.id);
            }
            varienElementMethods.setHasChanges(node.getUI().checkbox);
        }, tree);
        var root = new Ext.tree.TreeNode({
            text: '<?php echo $this->jsQuoteEscape($this->getRootNode()->getName()) ?>',
            draggable:false,
            checked:'<?php echo $this->getRootNode()->getChecked() ?>',
            id:'<?php echo $this->getRootNode()->getId() ?>',
            disabled: <?php echo ($this->getRootNode()->getDisabled() ? 'true' : 'false') ?>,
            uiProvider: Ext.tree.CheckboxNodeUI
        });
        tree.setRootNode(root);
        bildExcludedTree(root, <?php echo $this->getTreeJson() ?>);
        tree.addListener('click', excludedClick.createDelegate(this));
        tree.render();
        root.expand();
    });
    function bildExcludedTree(parent, config) {
        if (!config) {
            return null;
        }
        if (parent && config && config.length) {
            for (var i = 0; i < config.length; i++) {
                config[i].uiProvider = Ext.tree.CheckboxNodeUI;
                var node;
                var _node = Object.clone(config[i]);
                if (_node.children && !_node.children.length) {
                    delete(_node.children);
                    node = new Ext.tree.AsyncTreeNode(_node);

                } else {
                    node = new Ext.tree.TreeNode(config[i]);
                }

				if (parent.attributes.id == 1)
				{
					node.disabled = true;
				}

                parent.appendChild(node);
                node.loader = node.getOwnerTree().loader;
                if (config[i].children) {
                    bildExcludedTree(node, config[i].children);
                }
            }
        }
    }
    function excludedClick(node, e) {
        if (node.disabled) {
            return;
        }
        node.getUI().check(!node.getUI().checked());
        varienElementMethods.setHasChanges(Event.element(e), e);
    };
    function excludedAdd(id) {
        var ids = $('condition_excluded').value.split(',');
        ids.push(id);
        $('condition_excluded').value = ids.join(',');
    }
    function excludedRemove(id) {
        var ids = $('condition_excluded').value.split(',');
        while (-1 != ids.indexOf(id)) {
            ids.splice(ids.indexOf(id), 1);
        }
        $('condition_excluded').value = ids.join(',');
    }
</script>
<?php endif; ?>
